https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000
http://wiki.jikexueyuan.com/project/githug-walkthrough/level-3.html
安装。。。
安装结束，需要设置git config --global user.name ""---git分布式管理系统，机器必须自报家门
                git config --global user.email ""
版本库---目录，在目录里面的文件都可被git管理起来
1)创建一个版本库---选择一地，创建一新目录
mkdir 目录名
cd 目录
pwd---显示当前目录
2)git init--把目录变成git可管理的仓库---此时目录下多了一个.git(该目录用来跟踪管理'版本库',没事别改，小心破坏git仓库)
ls -a可显示.git仓库
3）把文件添加到版本库
版本控制系统--只能跟踪文本文件的改动：txt文件，网页，程序代码
图片，视频二进制文件没法跟踪文件变化
把文件添加到仓库：---编写的文件放在‘新建的目录下’上
step1:git add 文件名.txt---告诉git，把文件添加到仓库;文件添加到暂存区(stage)
step2:git commit -m ""---告诉git，把文件提交到仓库---commit可以一次提交多个文件;把暂存取得内容提交到当前分支;需要修改的文件统统放在暂存区，
然后，一次性提交暂存取得所有修改
/*版本回退*/---暂存区提交到了版本库
git log--显示从最近到最远的提交日志/git log --pretty=online(格式化)
git reset --hard HEAD^--HEAD当前版本;HEAD^上一个版本           cat文件名：linux下查看文件内容
git reset --head commit_id---只要命令行未被关闭
git reflog ---关闭电脑后查找commit id
/×改错了东西×/
git status--查看状态
git diff
git diff HEAD --readme.txt查看工作区和版本库区别
git checkout --文件名.txt---改错了工作取得某文件，撤销在工作区的修改(未add之前)
git reset HEAD 文件名---不但改错了工作区某文件，还添加到了暂存区，撤销暂存区，想丢弃修改，先回到上个
重新放回工作区(未commit之前)  git checkcout 把暂存取得修改回退到工作区
提交到版本库.git，撤销本次提交，不过未推到远程库
rm 工作区 ！== 版本库
工作区：
版本库：.git
暂存区（stage）

确实删除git rm && git commit
误删 git checkout
本地仓库，github仓库
本地仓库下运行 git remote add origin git@github.com:（ssh公钥账户列表）
git push -u origin master --把本地库的内容推送到远程仓库 -u第一次使用，git不但会把'本地'master分支内容推送到'远程'新的master分支&
把'本地'master分支和'远程'master分支关联起来
git clone git@github.com:
git://使用ssh,但也可使用https协议，每次推送必须使用口令
https速度慢，
分支管理：
  创建于合并分支：
  git checkout -b dev---创建dev分支<=>git branch dev & git checkout dev
  git branch ---查看当前分支
  git merge---把master指向dev的当前提交，合并某分支到当前分支
  git branch -d dev--删除dev分支
  git branch -D--强行删除
  解决冲突---就是把git合并失败的文件手动编辑为我们希望的内容，在提交
  git log --graph分支合并图
  git log --graph --pretty=online --abbrev-commit
  fast forward:删除分支后，会丢掉分支信息
  禁用 --no-ff,git会在merge时生成一个commit,这样，从分支历史上就可看出分支信息
  bug分支： git stash/git stash apply & git stash drop
                    git stash apply stash@{0}
                    git stash pop
           git stash list查看现场
  feature分支---强制删除
  多人协作：远程仓库默认名字：origin
  远程仓库克隆时，git自动把本地master和远程master分支对应
  git remote
  gi remote -v:查看可以抓取和推送的origin地址
  git push origin master/dev把‘本地提交’推送到‘远程仓库’        ----推送自己的修改
  git checkout -b dev origin/dev---创建远程origin的dev分支到本地，在‘本地创建’和远程分支对应的分支
  git branch --set-upstream-to=orgin/dev dev 设置dev与origin.dev连接，建立本地分支和远程分支的关联
  git pull    合并远程和本地分支，抓取远程的新提交，从远程抓取分支---git fetch(抓取数据) & git merge(合并)
  解决冲突
  push
  rebase:把本地未push的分叉提交历史整理成直线
  标签
  git tag 标签名---打标签
  git tag---查看标签
  找commit id
  git show 标签名--查看标签信息
  git tag -d 标签名
命令git push origin <tagname>可以推送一个本地标签；

命令git push origin --tags可以推送全部未推送过的本地标签；

命令git tag -d <tagname>可以删除一个本地标签；

命令git push origin :refs/tags/<tagname>可以删除一个远程标签。  
****************************************************************
git生命周期
工作目录                               暂存区                               提交区
untracked                            staged                               commited
modified
仓库里新建的文件
/从别地复制过来的
untracked files                     changes to be commited
被编辑过的文件
'modified'
changes not staged for commit
工作目录里在文件不会自动被git管理
git add -A未加到暂存区在加到暂存区

git config --get --local查看配置得用户名
git config --get --global
git config --add --local增加配置

git status(相当于ll)---查询文件状态
git status -s(short)

多人开发时，推送有先有后，根据git规则，推送时有人比你早推送了，再推送时会收到一个"no-fast forward”提示
"不能快进"
解决法1：先用git pull命令把'远程仓库'的最新代码合并到'本地'，再提交----这时'本地'的提交和'远程'的提交按时间顺序混合排列
解决法2：git rebase把'本地'仓库的更新排到'远程'仓库更新之后---这是'本地仓库'的所有提交都排在'远程仓库'的最后一次提脚之后
git rebase合并分支时，合并后的日之并非按各分值得提交时间排列，而是把一个分支的日志全部排列在两一个分志的日志之上；
即使他们并行开发，在开发过程中交错提交，看起来也好像按先后顺序开发的一样
mmaster "add content"
feature "add feature"   git rebase feature 
仓库代码clone到本地---把私钥给
生成密码--.ssh
ssh-keygen -t rsa -b 4096 -C '邮箱'
开启配置代理
eval "$(ssh-agent -s)"
pm2--本地自动化部署

git rm --cached filename---针对untracked文件(commit前)
git reset filename---针对modefied文件(commit前)

git reset --soft HEAD^取消最后一次提交操作
git reset --hard HEAD^删除最后一次提交操作/git reset --hard hash
git commit --amend相当于git reset --soft,git commit(插销commit)
git commit -a -m ""将已跟踪文件中的执行修改/删除操作在文件提交到本地仓库，即使没有git add
新加的文件(没有被git系统管理的文件)不能被提交到本地仓库

git checkout filename 撤销工作目录中内容
git checkout branch切换到×分枝
git checkout -切换到上一分枝

和其他人同时开发一个项目，大家都从中心仓库 clone 了文件到本地，然后分头工作，此时你只连接了一个远程仓库——中心仓库。
如果你的同伴写了一个函数，正好你可以用到它，那么你可以把这个函数 pull 到你的仓库里，这时你就连接了第二个远程仓库——同伴的仓库，
你们俩绕过了中心仓库，直接实现了私下交流，这也下是 Git 被称为‘分布式版本管理系统’的原因。

git remote查看远程仓库名字
git remote -v 查看远url程仓库l

git cherry-pick hash-code合并时选取其中一个提交合并到主线上
git remote add remote-name remote-url
git remote remove origin 删除'本地'指定在'远程地址'

git diff filename查看修改+3

git blame filename查看代码被谁编辑过了

git branch branch hash-code某次提交hash

git branch -r查看远程分枝列表
git log remote-name/branch-namec查看远程分支日志

git rebase feature 在master上执行,master日知会
git rebase master
            "test"
          branch test update1   branch test update2
master
          "dev"
          branch dev update

https://www.imooc.com/article/45233
https://www.zhihu.com/question/60279937

$ git rebase --onto master server client      
server 和 client 的共同祖先commit 为 C3，首先当前分支切换到 client ，并将其 HEAD 重置为 master，即为 C6，
然后将client 分支上 C3-C9 （不包括 C3，即 C8 和 C9）提交到当前分支上，即 C6 之后。
最终结果即为 client : C1-C2-C5-C6-C8-C9，C8 和 C9 是重新提交，其 commit_id 会改变。        
$ git checkout master         $ git merge client        
再进行如上两步操作，即可将 client 分支的部分功能开发内容合入 master

git reset --hard hash可取消git reset --hard HEAD^删除的最后一次的提交
git revert hash
git revert hash --no-edit由系统自动生成一句提交说明。没有该参数，git自动调用文本编辑器请你编写提交说明

git rebase -i hash---未推送到服务器
"pick"，表示执行此次提交；
"reword"，表示执行此次提交，但要'修改备注'内容；
"edit"，表示可以修改此次提交，比如再追加文件或修改文件；
"squash"，表示把此次提交的内容合并到上次提交中，备注内容也合并到上次提交中；
"fixup"，和 "squash" 类似，但会丢弃掉此次备注内容；
"exec"，执行命令行下的命令；
"drop"，删除此次提交。

git init会创建一个隐藏名为.git子目录
git世界，一个文件是一个git对象，一次提交也是一个git对象。存储在./git/objects/
git repack
git repack -d打包后删除以作废的文件,./git/objects/pack

git grep keyword filename 在指定文件中查找关键词

git log提交日志
git reflog操作日志--查看文件的git commit和git checkout记录

git bisect start
git bisect good hash
git bisect bad hash定义bisect查找范围
git bisect good表示当前程序通过测试
git bisect bad表示当前程序未通过测试
make test测试程序是否正确执行

git add filename --edit git自动打开编辑器，内容是git diff结果，只保留到stage的差异

git submodule add url把别人仓库代码作为自己项目一个库来使用，不用clone/cp
                      不需要clone第三方库，也不需要把第三方库的文件复制到你的项目中


























